// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hdfs.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HdfsMasterService_CreateFile_FullMethodName = "/hdfs.HdfsMasterService/CreateFile"
)

// HdfsMasterServiceClient is the client API for HdfsMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdfsMasterServiceClient interface {
	CreateFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse], error)
}

type hdfsMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHdfsMasterServiceClient(cc grpc.ClientConnInterface) HdfsMasterServiceClient {
	return &hdfsMasterServiceClient{cc}
}

func (c *hdfsMasterServiceClient) CreateFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HdfsMasterService_ServiceDesc.Streams[0], HdfsMasterService_CreateFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateFileRequest, CreateFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsMasterService_CreateFileClient = grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse]

// HdfsMasterServiceServer is the server API for HdfsMasterService service.
// All implementations must embed UnimplementedHdfsMasterServiceServer
// for forward compatibility.
type HdfsMasterServiceServer interface {
	CreateFile(grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]) error
	mustEmbedUnimplementedHdfsMasterServiceServer()
}

// UnimplementedHdfsMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHdfsMasterServiceServer struct{}

func (UnimplementedHdfsMasterServiceServer) CreateFile(grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedHdfsMasterServiceServer) mustEmbedUnimplementedHdfsMasterServiceServer() {}
func (UnimplementedHdfsMasterServiceServer) testEmbeddedByValue()                           {}

// UnsafeHdfsMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdfsMasterServiceServer will
// result in compilation errors.
type UnsafeHdfsMasterServiceServer interface {
	mustEmbedUnimplementedHdfsMasterServiceServer()
}

func RegisterHdfsMasterServiceServer(s grpc.ServiceRegistrar, srv HdfsMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedHdfsMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HdfsMasterService_ServiceDesc, srv)
}

func _HdfsMasterService_CreateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HdfsMasterServiceServer).CreateFile(&grpc.GenericServerStream[CreateFileRequest, CreateFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsMasterService_CreateFileServer = grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]

// HdfsMasterService_ServiceDesc is the grpc.ServiceDesc for HdfsMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdfsMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hdfs.HdfsMasterService",
	HandlerType: (*HdfsMasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFile",
			Handler:       _HdfsMasterService_CreateFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "hdfs.proto",
}
